-- Up to now, we.ve been working with a single table, but entity data in the real world is often broken down into pieces 
-- and stored across multiple orthogonal tables using a process known as normalization.

-- Database normalization is useful because it minimizes duplicate data in any single table, and allows for data in the 
-- database to grow independently of each other (ie. Types of car engines can grow independent of each type of car).

-- Using the JOIN clause in a query, we can combine row data across two separate tables using this unique key. 
-- The first of the joins that we will introduce is the INNER JOIN.

=>Select query with INNER JOIN on multiple tables

SELECT column, another_table_column, …
FROM mytable
INNER JOIN another_table 
    ON mytable.id = another_table.id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;


=> Select query with LEFT/RIGHT/FULL JOINs on multiple tables

SELECT column, another_column, …
FROM mytable
INNER/LEFT/RIGHT/FULL JOIN another_table 
    ON mytable.id = another_table.matching_id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

-- Like the INNER JOIN these three new joins have to specify which column to join the data on.
-- When joining table A to table B, a LEFT JOIN simply includes rows from A regardless of whether 
-- a matching row is found in B. The RIGHT JOIN is the same, but reversed, keeping rows in B regardless 
-- of whether a match is found in A. Finally, a FULL JOIN simply means that rows from both tables are 
-- kept, regardless of whether a matching row exists in the other table.

-- You might see queries with these joins written as LEFT OUTER JOIN, RIGHT OUTER JOIN, or FULL OUTER JOIN, 
-- but the OUTER keyword is really kept for SQL-92 compatibility and these queries are simply equivalent to 
-- LEFT JOIN, RIGHT JOIN, and FULL JOIN respectively.


=> Select query with constraints on NULL values

SELECT column, another_column, …
FROM mytable
WHERE column IS/IS NOT NULL
AND/OR another_condition
AND/OR …;